const core = require('@actions/core');
const github = require('@actions/github');

async function run() {
  // get the issue from the payload
  const issue = github.context.payload.issue
  if (!issue) {
    core.setFailed("No issue found on Actions context");
    return;
  }

  // need a token to init the client
  const token = core.getInput('github_token', { required: true });
  if (!token) {
    core.setFailed("No GITHUB_TOKEN environment variable found");
    return;
  }

  const prefix = core.getInput('child-prefix', { required: true });
  if (!prefix) {
    core.setFailed("No child prefix found");
    return;
  }

  // if there's a prefix, make sure to add a space
  if (prefix.length > 0) {
    prefix = concat(prefix.trim(), ' ')
  }

  // build an array of repos like {owner, name}
  const reposRaw = core.getInput('repos');
  const nwoList = reposRaw.split(',');
  if (nwoList.length == 0) {
    core.setFailed('Missing required repos input');
    return;
  }
  var repos = [];
  for (let i = 0; i < nwoList.length; i++) {
    const parts = nwoList[i].split('/');
    if (parts.length == 2) {
      repos.push({owner: parts[0], name: parts[1]});
    }
  }

  // collect a list of checklists to append to the parent issue
  var checklists = []
  
  // create child issues in each repository
  const client = new github.GitHub(token);
  for (let i = 0; i < repos.length; i++) {
    try {
      console.log(`Creating child issue in ${repos[i].owner}/${repos[i].name}...`)
      const issueCreateResponse = await client.issues.create({
        owner: repos[i].owner,
        repo: repos[i].name,
        title: `${prefix}${issue.title}`,
        body: `Child task of ${issue.html_url}`,
        labels: core.getInput('add-labels').split(',').filter(l => l.length > 1).map(l => {return {name: l};})
      });
      console.log(`Created issue: ${issueCreateResponse.data.html_url}`);
      checklists.push(`- [ ] ${issueCreateResponse.data.html_url}`);
    } catch (error) {
      core.error(`Failed to create child issue: ${error}`);
    }
  }

  var fetchedLabels = [];
  var fetchedBody = "";
  try {
    console.log('Getting latest issue body...');
    const issueGetResponse = await client.issues.get({
      owner: github.context.payload.repository.owner.login,
      repo: github.context.payload.repository.name,
      issue_number: issue.number,
    });
    fetchedBody = issueGetResponse.data.body;
    fetchedLabels = issueGetResponse.data.labels;
  } catch (error) {
    core.setFailed(`Failed getting the latest issue body: ${error}`)
  }  

  const checklistStartMarker = "<!-- DO NOT MODIFY: Begin auto-managed issue checklist -->"
  const prependedList = `${checklistStartMarker}\n${checklists.join("\n")}`
  var newBody = ""
  if (fetchedBody.includes(checklistStartMarker)) {
    newBody = fetchedBody.replace(checklistStartMarker, prependedList)
  } else {
    const disclaimer = "<sub><em>This checklist is automatically generated by the <code>create-child-issues</code> action. Please do not modify.</em></sub>"
    newBody = fetchedBody.concat(`\n\n<hr />\n\n#### Generated child issues:\n${prependedList}\n\n${disclaimer}`)
  }

  try {
    await client.issues.update({
      owner: github.context.payload.repository.owner.login,
      repo: github.context.payload.repository.name,
      issue_number: issue.number,
      body: newBody
    })
  } catch (error) {
    core.setFailed(`Failed updating parent issue: ${error}`)
  }
}

run()
